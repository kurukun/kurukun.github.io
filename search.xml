<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IMDB评论情感二分类小结</title>
      <link href="/posts/29fc36c3.html"/>
      <url>/posts/29fc36c3.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-确定设备">1.确定设备</h3><ul><li><p>使用**torch.device()**方法指定设备</p></li><li><p>对于Tensor或者model，可以使用to(device)的方式转移到指定设备上运算</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前运行设备为: &#123;&#125; &quot;</span>.<span class="built_in">format</span>(device))</span><br></pre></td></tr></table></figure><h3 id="2-准备数据">2.准备数据</h3><ul><li><p>需要用到<code>torch.utils.data</code>里面的两个类，<strong>Dataset</strong>和<strong>DataLoader</strong></p></li><li><p>新建自己的数据类并继承<strong>Dataset类</strong></p></li><li><p>在构造函数里读取文件，并准备好<strong>data</strong>和<strong>label</strong>的数据列表</p></li><li><p>在<strong>getitem</strong>方法指定按索引读取数据时返回哪些data</p></li><li><p>在<strong>len</strong>方法指定使用len()方法获取数据长度时返回的值</p></li><li><p>之后使用<strong>Dataloader</strong>读取用自建数据类实例化的数据</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="comment"># 初始化时指定存放路径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, fp</span>):</span><br><span class="line">        xy = pd.read_csv(fp)</span><br><span class="line">        self.<span class="built_in">len</span> = <span class="built_in">len</span>(xy)</span><br><span class="line">        <span class="comment"># 句子</span></span><br><span class="line">        self.x_data = tokenizer(xy.text.values.tolist(), padding=<span class="string">&#x27;max_length&#x27;</span>, max_length=<span class="number">102</span>, truncation=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># input_ids</span></span><br><span class="line">        self.x_input_ids = torch.Tensor(self.x_data[<span class="string">&#x27;input_ids&#x27;</span>])  <span class="comment"># [[x, x, x], [x, x, x], ...]</span></span><br><span class="line">        <span class="comment"># token_type_ids</span></span><br><span class="line">        self.x_token_type_ids = torch.Tensor(self.x_data[<span class="string">&#x27;token_type_ids&#x27;</span>])</span><br><span class="line">        <span class="comment"># attention_mask</span></span><br><span class="line">        self.x_attention_mask = torch.Tensor(self.x_data[<span class="string">&#x27;attention_mask&#x27;</span>])</span><br><span class="line">        <span class="comment"># 标签Tensor</span></span><br><span class="line">        self.y_data = torch.Tensor(xy.label.values.tolist()) <span class="comment"># [1, 1, 0, 0, ...]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据索引</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="comment"># [x, x, x]</span></span><br><span class="line">        <span class="keyword">return</span> self.x_input_ids[index], self.x_token_type_ids[index], self.x_attention_mask[index], self.y_data[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据总量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">train_data = MyData(<span class="string">&#x27;imdbsTrain.csv&#x27;</span>)</span><br><span class="line">test_data = MyData(<span class="string">&#x27;imdbsTest.csv&#x27;</span>)</span><br><span class="line">train_loader = DataLoader(dataset=train_data, batch_size=<span class="number">16</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data, batch_size=<span class="number">16</span>)</span><br></pre></td></tr></table></figure><h3 id="3-设计模型">3.设计模型</h3><ul><li><p>需要用到<strong>torch.nn.Module</strong></p></li><li><p>在构造函数构建网络</p></li><li><p>在前馈方法确定正向传播的方式</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">        self.bert = BertModel.from_pretrained(<span class="string">&#x27;../bert-base-uncased&#x27;</span>)</span><br><span class="line">        self.linear1 = torch.nn.Linear(<span class="number">768</span>, <span class="number">192</span>)</span><br><span class="line">        self.linear2 = torch.nn.Linear(<span class="number">192</span>, <span class="number">96</span>)</span><br><span class="line">        self.linear3 = torch.nn.Linear(<span class="number">96</span>, <span class="number">1</span>)</span><br><span class="line">        self.dropout = torch.nn.Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_ids, token_type_ids, attention_mask</span>):</span><br><span class="line">        input_ids = input_ids.long()</span><br><span class="line">        token_type_ids = token_type_ids.long()</span><br><span class="line">        attention_mask = attention_mask.long()</span><br><span class="line">        output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)</span><br><span class="line">        output = output[<span class="string">&#x27;pooler_output&#x27;</span>]  <span class="comment"># cls那个嵌入表示 batchSize * 768</span></span><br><span class="line">        output = F.relu(self.linear1(output))</span><br><span class="line">        output = F.relu(self.linear2(output))</span><br><span class="line">        output = self.dropout(output)</span><br><span class="line">        output = F.sigmoid(self.linear3(output))</span><br><span class="line">        <span class="keyword">return</span> output</span><br></pre></td></tr></table></figure><h3 id="4-定义优化器和损失函数">4.定义优化器和损失函数</h3><ul><li>需要用到**<code>torch.nn</code>**和<code>torch.optim</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">criterion = torch.nn.BCELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)  <span class="comment"># 二元交叉熵损失函数，二分类用</span></span><br><span class="line"><span class="comment"># optimizer = torch.optim.Adam(model.parameters(), lr=lr)</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=lr)</span><br></pre></td></tr></table></figure><h3 id="5-训练模型">5.训练模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">    model.train()</span><br><span class="line">    losses = []</span><br><span class="line">    accuracy = []</span><br><span class="line">    start_time = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> batch, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader, <span class="number">0</span>):</span><br><span class="line">    <span class="comment"># for input_ids, token_type_ids, attention_mask, labels in tqdm(train_loader, total=len(train_loader)):</span></span><br><span class="line">        input_ids, token_type_ids, attention_mask, labels = data  <span class="comment"># [[x, x, x], ... [x, x, x]] 这里有16个</span></span><br><span class="line">        <span class="comment"># 将输入张量转入gpu</span></span><br><span class="line">        input_ids, token_type_ids, attention_mask, labels = input_ids.to(device), token_type_ids.to(</span><br><span class="line">            device), attention_mask.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出yhat</span></span><br><span class="line">        y_pred = model(input_ids, token_type_ids, attention_mask)  <span class="comment"># 维度要和标签的维度对应</span></span><br><span class="line">        labels = labels.unsqueeze(<span class="number">1</span>)  <span class="comment"># 标签也要转成矩阵的形式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = criterion(y_pred, labels)</span><br><span class="line">        <span class="comment"># print(&#x27;当前批次的损失为：&#x27;,loss.item())</span></span><br><span class="line">        losses.append(loss.item())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算准确率</span></span><br><span class="line">        pred_labels = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> y_pred:</span><br><span class="line">            <span class="keyword">if</span> p.item() &gt; <span class="number">0.5</span>:  <span class="comment"># 设定阈值为0.5</span></span><br><span class="line">                pred_labels.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pred_labels.append(<span class="number">0</span>)</span><br><span class="line">        pred_labels = torch.Tensor(pred_labels).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        pred_labels = pred_labels.to(device)</span><br><span class="line">        acc = torch.<span class="built_in">sum</span>(pred_labels == labels).item() / <span class="built_in">len</span>(pred_labels)  <span class="comment"># 计算准确率</span></span><br><span class="line">        accuracy.append(acc)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 训练完一批后的固定步骤</span></span><br><span class="line">        optimizer.zero_grad()  <span class="comment"># 梯度归0</span></span><br><span class="line">        loss.backward()  <span class="comment"># 反向传播</span></span><br><span class="line">        optimizer.step()  <span class="comment"># 更新参数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化指标</span></span><br><span class="line">    elapsed_time = time.time() - start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nEpoch: &#123;&#125;/&#123;&#125;: &quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, epoch),  <span class="comment"># 第几轮训练</span></span><br><span class="line">          <span class="string">&quot;Loss: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(losses)),  <span class="comment"># 该轮训练的平均损失</span></span><br><span class="line">          <span class="string">&quot;Accuracy: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(accuracy)),  <span class="comment"># 该论的准确率</span></span><br><span class="line">          <span class="string">&#x27;Time: &#123;:.2f&#125;s&#x27;</span>.<span class="built_in">format</span>(elapsed_time))  <span class="comment"># 该论训练时间</span></span><br></pre></td></tr></table></figure><h3 id="6-测试模型">6.测试模型</h3><ul><li>相当于训练跑一个epoch，但是不需要计算梯度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> torch.no_grad():  <span class="comment"># 不计算梯度，因为不需要反向传播</span></span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    eval_losses = []</span><br><span class="line">    eval_acc = []</span><br><span class="line">    eval_start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> batch, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader, <span class="number">0</span>):</span><br><span class="line">        input_ids, token_type_ids, attention_mask, labels = data</span><br><span class="line">        <span class="comment"># 将输入张量转入gpu</span></span><br><span class="line">        input_ids, token_type_ids, attention_mask, labels = input_ids.to(device), token_type_ids.to(</span><br><span class="line">            device), attention_mask.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 输出yhat</span></span><br><span class="line">        y_pred = model(input_ids, token_type_ids, attention_mask)  <span class="comment"># 维度要和标签的维度对应</span></span><br><span class="line">        labels = labels.unsqueeze(<span class="number">1</span>)  <span class="comment"># 标签也要转成矩阵的形式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = criterion(y_pred, labels)</span><br><span class="line">        eval_losses.append(loss.item())</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算准确率</span></span><br><span class="line">        pred_labels = []</span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> y_pred:</span><br><span class="line">            <span class="keyword">if</span> p.item() &gt; <span class="number">0.5</span>:  <span class="comment"># 设定阈值为0.5</span></span><br><span class="line">                pred_labels.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pred_labels.append(<span class="number">0</span>)</span><br><span class="line">        pred_labels = torch.Tensor(pred_labels).unsqueeze(<span class="number">1</span>)</span><br><span class="line">        pred_labels = pred_labels.to(device)</span><br><span class="line">        acc = torch.<span class="built_in">sum</span>(pred_labels == labels).item() / <span class="built_in">len</span>(pred_labels)  <span class="comment"># 计算准确率</span></span><br><span class="line">        eval_acc.append(acc)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化指标</span></span><br><span class="line">    elapsed_time = time.time() - eval_start_time</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nEval_loss: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(eval_losses)),  <span class="comment"># 该轮训练的平均损失</span></span><br><span class="line">          <span class="string">&quot;Accuracy: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(eval_acc)),  <span class="comment"># 该论的准确率</span></span><br><span class="line">          <span class="string">&#x27;Time: &#123;:.2f&#125;s&#x27;</span>.<span class="built_in">format</span>(elapsed_time))  <span class="comment"># 该论训练时间</span></span><br></pre></td></tr></table></figure><h3 id="其他">其他</h3><ul><li><p>bert模型的输入必须是tensor([ [ ] ])的形式，如tensor[ [101, 222, 102], [201, 333, 202] ]，并且元素必须是long或者Int型</p></li><li><p>tokenizer()方法返回一个对象，里面包含input_ids、attention_mask、token_type_ids三个属性</p></li><li><p>bert的输出有两个，分别为<strong>句子所有单词</strong>的嵌入表示和<strong>CLS标记</strong>的嵌入表示（包含整个句子的聚合表示，可以将其作为整个句子的嵌入表示）</p></li><li><p>确定种子的值可以保证模型训练的结果一致</p></li></ul><h3 id="完整代码">完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> transformers <span class="keyword">import</span> BertTokenizer, BertModel</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确定设备</span></span><br><span class="line"><span class="comment"># torch.device(&quot;str&quot;)方法指定设备</span></span><br><span class="line"><span class="comment"># 对于tensor，可以用.to(device)将其置于指定设备上运算</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前运行设备为: &#123;&#125; &quot;</span>.<span class="built_in">format</span>(device))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 引入分词器，BertTokenizer换成AutoTokenizer的话会根据载入的模型自动适配分词器的种类</span></span><br><span class="line">tokenizer = BertTokenizer.from_pretrained(<span class="string">&#x27;../bert-base-uncased&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.准备数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyData</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="comment"># 初始化时指定存放路径</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, fp</span>):</span><br><span class="line">        xy = pd.read_csv(fp)</span><br><span class="line">        self.<span class="built_in">len</span> = <span class="built_in">len</span>(xy)</span><br><span class="line">        <span class="comment"># 句子</span></span><br><span class="line">        self.x_data = tokenizer(xy.text.values.tolist(), padding=<span class="string">&#x27;max_length&#x27;</span>, max_length=<span class="number">102</span>, truncation=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># input_ids</span></span><br><span class="line">        self.x_input_ids = torch.Tensor(self.x_data[<span class="string">&#x27;input_ids&#x27;</span>])  <span class="comment"># [[x, x, x], [x, x, x], ...]</span></span><br><span class="line">        <span class="comment"># token_type_ids</span></span><br><span class="line">        self.x_token_type_ids = torch.Tensor(self.x_data[<span class="string">&#x27;token_type_ids&#x27;</span>])</span><br><span class="line">        <span class="comment"># attention_mask</span></span><br><span class="line">        self.x_attention_mask = torch.Tensor(self.x_data[<span class="string">&#x27;attention_mask&#x27;</span>])</span><br><span class="line">        <span class="comment"># 标签Tensor</span></span><br><span class="line">        self.y_data = torch.Tensor(xy.label.values.tolist()) <span class="comment"># [1, 1, 0, 0, ...]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据索引</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="comment"># [x, x, x]</span></span><br><span class="line">        <span class="keyword">return</span> self.x_input_ids[index], self.x_token_type_ids[index], self.x_attention_mask[index], self.y_data[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取数据总量</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">len</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line">train_data = MyData(<span class="string">&#x27;imdbsTrain.csv&#x27;</span>)</span><br><span class="line">test_data = MyData(<span class="string">&#x27;imdbsTest.csv&#x27;</span>)</span><br><span class="line"><span class="comment"># input_ids, token_type_ids, attention_mask, labels = train_data[0]</span></span><br><span class="line"><span class="comment"># print(input_ids)</span></span><br><span class="line"><span class="comment"># print(token_type_ids)</span></span><br><span class="line"><span class="comment"># print(attention_mask)</span></span><br><span class="line"><span class="comment"># print(labels)</span></span><br><span class="line">train_loader = DataLoader(dataset=train_data, batch_size=<span class="number">16</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_data, batch_size=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.设计模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModel</span>(torch.nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line">        self.bert = BertModel.from_pretrained(<span class="string">&#x27;../bert-base-uncased&#x27;</span>)</span><br><span class="line">        self.linear1 = torch.nn.Linear(<span class="number">768</span>, <span class="number">192</span>)</span><br><span class="line">        self.linear2 = torch.nn.Linear(<span class="number">192</span>, <span class="number">96</span>)</span><br><span class="line">        self.linear3 = torch.nn.Linear(<span class="number">96</span>, <span class="number">1</span>)</span><br><span class="line">        self.dropout = torch.nn.Dropout(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, input_ids, token_type_ids, attention_mask</span>):</span><br><span class="line">        input_ids = input_ids.long()  <span class="comment"># [[1, 1, 1], [16, 16, 16]]</span></span><br><span class="line">        token_type_ids = token_type_ids.long()</span><br><span class="line">        attention_mask = attention_mask.long()</span><br><span class="line">        <span class="comment"># 也就是说bert的输入必须是[[]]的形式，即使是一个句子也一样，并且里面的元素得是long或者int</span></span><br><span class="line">        output = self.bert(input_ids=input_ids, attention_mask=attention_mask, token_type_ids=token_type_ids)</span><br><span class="line">        output = output[<span class="string">&#x27;pooler_output&#x27;</span>]  <span class="comment"># cls那个嵌入表示 batchSize * 768</span></span><br><span class="line">        output = F.relu(self.linear1(output))</span><br><span class="line">        output = F.relu(self.linear2(output))</span><br><span class="line">        output = self.dropout(output)</span><br><span class="line">        output = F.sigmoid(self.linear3(output))</span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数准备</span></span><br><span class="line"><span class="comment"># 设置随机数种子，保证结果可复现</span></span><br><span class="line">seed = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> device == <span class="string">&#x27;cuda&#x27;</span>:</span><br><span class="line">    torch.cuda.manual_seed(seed)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    torch.manual_seed(seed)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化模型</span></span><br><span class="line">model = MyModel()</span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置参数</span></span><br><span class="line">lr = <span class="number">0.01</span></span><br><span class="line">epoch = <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.定义优化器和损失函数</span></span><br><span class="line">criterion = torch.nn.BCELoss(reduction=<span class="string">&#x27;mean&#x27;</span>)  <span class="comment"># 二元交叉熵损失函数，二分类用</span></span><br><span class="line"><span class="comment"># optimizer = torch.optim.Adam(model.parameters(), lr=lr)</span></span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=lr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.训练</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epoch):</span><br><span class="line">        model.train()</span><br><span class="line">        losses = []</span><br><span class="line">        accuracy = []</span><br><span class="line">        start_time = time.time()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> batch, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># for input_ids, token_type_ids, attention_mask, labels in tqdm(train_loader, total=len(train_loader)):</span></span><br><span class="line">            input_ids, token_type_ids, attention_mask, labels = data  <span class="comment"># [[x, x, x], ... [x, x, x]] 这里有16个</span></span><br><span class="line">            <span class="comment"># 将输入张量转入gpu</span></span><br><span class="line">            input_ids, token_type_ids, attention_mask, labels = input_ids.to(device), token_type_ids.to(</span><br><span class="line">                device), attention_mask.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 输出yhat</span></span><br><span class="line">            y_pred = model(input_ids, token_type_ids, attention_mask)  <span class="comment"># 维度要和标签的维度对应</span></span><br><span class="line">            labels = labels.unsqueeze(<span class="number">1</span>)  <span class="comment"># 标签也要转成矩阵的形式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算损失</span></span><br><span class="line">            loss = criterion(y_pred, labels)</span><br><span class="line">            <span class="comment"># print(&#x27;当前批次的损失为：&#x27;,loss.item())</span></span><br><span class="line">            losses.append(loss.item())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算准确率</span></span><br><span class="line">            pred_labels = []</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> y_pred:</span><br><span class="line">                <span class="keyword">if</span> p.item() &gt; <span class="number">0.5</span>:  <span class="comment"># 设定阈值为0.5</span></span><br><span class="line">                    pred_labels.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pred_labels.append(<span class="number">0</span>)</span><br><span class="line">            pred_labels = torch.Tensor(pred_labels).unsqueeze(<span class="number">1</span>)</span><br><span class="line">            pred_labels = pred_labels.to(device)</span><br><span class="line">            acc = torch.<span class="built_in">sum</span>(pred_labels == labels).item() / <span class="built_in">len</span>(pred_labels)  <span class="comment"># 计算准确率</span></span><br><span class="line">            accuracy.append(acc)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 训练完一批后的固定步骤</span></span><br><span class="line">            optimizer.zero_grad()  <span class="comment"># 梯度归0</span></span><br><span class="line">            loss.backward()  <span class="comment"># 反向传播</span></span><br><span class="line">            optimizer.step()  <span class="comment"># 更新参数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 可视化指标</span></span><br><span class="line">        elapsed_time = time.time() - start_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nEpoch: &#123;&#125;/&#123;&#125;: &quot;</span>.<span class="built_in">format</span>(i + <span class="number">1</span>, epoch),  <span class="comment"># 第几轮训练</span></span><br><span class="line">              <span class="string">&quot;Loss: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(losses)),  <span class="comment"># 该轮训练的平均损失</span></span><br><span class="line">              <span class="string">&quot;Accuracy: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(accuracy)),  <span class="comment"># 该论的准确率</span></span><br><span class="line">              <span class="string">&#x27;Time: &#123;:.2f&#125;s&#x27;</span>.<span class="built_in">format</span>(elapsed_time))  <span class="comment"># 该论训练时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5. 测试</span></span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():  <span class="comment"># 不计算梯度，因为不需要反向传播</span></span><br><span class="line">        model.<span class="built_in">eval</span>()</span><br><span class="line">        eval_losses = []</span><br><span class="line">        eval_acc = []</span><br><span class="line">        eval_start_time = time.time()</span><br><span class="line">        <span class="keyword">for</span> batch, data <span class="keyword">in</span> <span class="built_in">enumerate</span>(test_loader, <span class="number">0</span>):</span><br><span class="line">            input_ids, token_type_ids, attention_mask, labels = data</span><br><span class="line">            <span class="comment"># 将输入张量转入gpu</span></span><br><span class="line">            input_ids, token_type_ids, attention_mask, labels = input_ids.to(device), token_type_ids.to(</span><br><span class="line">                device), attention_mask.to(device), labels.to(device)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 输出yhat</span></span><br><span class="line">            y_pred = model(input_ids, token_type_ids, attention_mask)  <span class="comment"># 维度要和标签的维度对应</span></span><br><span class="line">            labels = labels.unsqueeze(<span class="number">1</span>)  <span class="comment"># 标签也要转成矩阵的形式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算损失</span></span><br><span class="line">            loss = criterion(y_pred, labels)</span><br><span class="line">            eval_losses.append(loss.item())</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算准确率</span></span><br><span class="line">            pred_labels = []</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> y_pred:</span><br><span class="line">                <span class="keyword">if</span> p.item() &gt; <span class="number">0.5</span>:  <span class="comment"># 设定阈值为0.5</span></span><br><span class="line">                    pred_labels.append(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pred_labels.append(<span class="number">0</span>)</span><br><span class="line">            pred_labels = torch.Tensor(pred_labels).unsqueeze(<span class="number">1</span>)</span><br><span class="line">            pred_labels = pred_labels.to(device)</span><br><span class="line">            acc = torch.<span class="built_in">sum</span>(pred_labels == labels).item() / <span class="built_in">len</span>(pred_labels)  <span class="comment"># 计算准确率</span></span><br><span class="line">            eval_acc.append(acc)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 可视化指标</span></span><br><span class="line">        elapsed_time = time.time() - eval_start_time</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nEval_loss: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(eval_losses)),  <span class="comment"># 该轮训练的平均损失</span></span><br><span class="line">              <span class="string">&quot;Accuracy: &#123;:.6f&#125;; &quot;</span>.<span class="built_in">format</span>(np.mean(eval_acc)),  <span class="comment"># 该论的准确率</span></span><br><span class="line">              <span class="string">&#x27;Time: &#123;:.2f&#125;s&#x27;</span>.<span class="built_in">format</span>(elapsed_time))  <span class="comment"># 该论训练时间</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语的动词变形</title>
      <link href="/posts/af6253db.html"/>
      <url>/posts/af6253db.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-ます型">1.ます型</h2><h3 id="a-一类动词">a.一类动词</h3><p>書（か）く　ー＞　書（か）きます</p><p>ある　ー＞　あります</p><p>规则：将<strong>词的结尾音</strong>转变为对应行的<strong>i</strong>音后 + <strong>ます</strong></p><h3 id="b-二类动词">ｂ.二类动词</h3><p>食（た）べる　ー＞　食べます</p><p>规则：将结尾的<strong>る</strong>变成<strong>ます</strong></p><h3 id="c-三类动词">ｃ.三类动词</h3><p>来（く）る　ー＞　来（き）ます</p><p>する　ー＞　します</p><p>规则：三类动词就这两个，直接记</p><h2 id="2-て型">2.て型</h2><h3 id="a-一类动词-2">a.一类动词</h3><p>書（か）く　ー＞　書（か）いて</p><p>会（あ）う　ー＞　会（あ）って</p><p>规则：根据<strong>词的结尾音</strong>不同有多种变化</p><ul><li><p>く　ー＞　いて</p></li><li><p>ぐ　ー＞　いで</p></li><li><p>す　ー＞　して</p></li><li><p>む、ぶ、ぬ　ー＞　んで</p></li><li><p>う、る、つ　ー＞　って</p></li></ul><h3 id="b-二类动词-2">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べて</p><p>规则：将结尾的<strong>る</strong>变成<strong>て</strong></p><h3 id="c-三类动词-2">ｃ.三类动词</h3><p>来（く）る　ー＞　来（き）て</p><p>する　ー＞　して</p><h2 id="３-た型">３.た型</h2><p>规则（1、2、3类动词适用）：将动词て型中的<strong>て</strong>换成<strong>た</strong>即可</p><h2 id="４-たい型">４.たい型</h2><p>规则（1、2、3类动词适用）：将动词ます型中的<strong>ます</strong>换成<strong>たい</strong>即可</p><h2 id="５-ない型">５.ない型</h2><h3 id="a-一类动词-3">a.一类动词</h3><p>書（か）く　ー＞　書（か）かない</p><p>会（あ）う　ー＞　会（あ）わない</p><p>规则：</p><ul><li><p>将<strong>词的结尾音</strong>变为对应行的<strong>あ</strong>音后加<strong>ない</strong></p></li><li><p>其中第一行比较特殊，对应的あ音为<strong>わ</strong></p></li></ul><h3 id="b-二类动词-3">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べない</p><p>规则：将结尾的<strong>る</strong>变成<strong>ない</strong></p><h3 id="c-三类动词-3">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）ない</p><p>する　ー＞　しない</p><h2 id="６-命令型">６.命令型</h2><h3 id="a-一类动词-4">a.一类动词</h3><p>書（か）く　ー＞　書（か）け</p><p>会（あ）う　ー＞　会（あ）え</p><p>规则：将<strong>词的结尾音</strong>变为对应行的<strong>え</strong>音</p><h3 id="b-二类动词-4">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べろ</p><p>规则：将结尾的<strong>る</strong>变成<strong>ろ</strong></p><h3 id="c-三类动词-4">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）い</p><p>する　ー＞　しろ</p><h2 id="７-意志型">７.意志型</h2><h3 id="a-一类动词-5">a.一类动词</h3><p>書（か）く　ー＞　書（か）こう</p><p>会（あ）う　ー＞　会（あ）おう</p><p>规则：将<strong>词的结尾音</strong>变为对应行的<strong>お</strong>音再加<strong>う</strong></p><h3 id="b-二类动词-5">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べよう</p><p>规则：将结尾的<strong>る</strong>变成<strong>よう</strong></p><h3 id="c-三类动词-5">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）よう</p><p>する　ー＞　しよう</p><h2 id="８-ば型">８.ば型</h2><h3 id="a-一类动词-6">a.一类动词</h3><p>書（か）く　ー＞　書（か）けば</p><p>会（あ）う　ー＞　会（あ）えば</p><p>规则：将<strong>词的结尾音</strong>变为对应行的<strong>え</strong>音再加ば</p><h3 id="b-二类动词-6">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べれば</p><p>规则：将结尾的<strong>る</strong>变成<strong>れば</strong></p><h3 id="c-三类动词-6">ｃ.三类动词</h3><p>来（く）る　ー＞　来（く）れば</p><p>する　ー＞　すれば</p><h2 id="９-可能型">９.可能型</h2><h3 id="a-一类动词-7">a.一类动词</h3><p>書（か）く　ー＞　書（か）ける</p><p>会（あ）う　ー＞　会（あ）える</p><p>规则：将<strong>词的结尾音</strong>变为对应行的<strong>え</strong>音再加る</p><h3 id="b-二类动词-7">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べられる</p><p>规则：将结尾的<strong>る</strong>变成<strong>られる</strong></p><h3 id="c-三类动词-7">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）られる</p><p>する　ー＞　できる</p><h2 id="10-被动型">10.被动型</h2><h3 id="a-一类动词-8">a.一类动词</h3><p>書（か）く　ー＞　書（か）かれる</p><p>会（あ）う　ー＞　会（あ）われる</p><p>规则：将动词ない型的<strong>ない</strong>改为<strong>れる</strong></p><h3 id="b-二类动词-8">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べられる</p><p>规则：将结尾的<strong>る</strong>变成<strong>られる</strong></p><h3 id="c-三类动词-8">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）られる</p><p>する　ー＞　される</p><h2 id="11-使役型">11.使役型</h2><h3 id="a-一类动词-9">a.一类动词</h3><p>書（か）く　ー＞　書（か）かせる</p><p>会（あ）う　ー＞　会（あ）わせる</p><p>规则：将动词ない型的<strong>ない</strong>改为<strong>せる</strong></p><h3 id="b-二类动词-9">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べさせる</p><p>规则：将结尾的<strong>る</strong>变成<strong>させる</strong></p><h3 id="c-三类动词-9">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）させる</p><p>する　ー＞　させる</p><h2 id="12-使役被动型">12.使役被动型</h2><h3 id="a-一类动词-10">a.一类动词</h3><p>書（か）く　ー＞　書（か）かされる</p><p>会（あ）う　ー＞　会（あ）わされる</p><p>规则：将动词ない型的<strong>ない</strong>改为<strong>される</strong></p><h3 id="b-二类动词-10">ｂ.二类动词</h3><p>食（た）べる　ー＞　食（た）べさせられる</p><p>规则：将结尾的<strong>る</strong>变成<strong>させられる</strong></p><h3 id="c-三类动词-10">ｃ.三类动词</h3><p>来（く）る　ー＞　来（こ）させられる</p><p>する　ー＞　させられる</p>]]></content>
      
      
      <categories>
          
          <category> 语言学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建小结</title>
      <link href="/posts/992f0c61.html"/>
      <url>/posts/992f0c61.html</url>
      
        <content type="html"><![CDATA[<h2 id="事先准备">事先准备</h2><ul><li>安装Git</li><li>安装Nodejs</li></ul><h2 id="起步">起步</h2><ol><li><p>安装hexo<br>在命令行窗口或者<code>Git BASH</code>输入以下命令安装（-g代表是全局安装），安装完成后输入hexo-v验证是否安装成功。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化hexo<br>在目标路径打开命令行窗口，输入以下命令初始化项目。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-demo(项目名)</span><br></pre></td></tr></table></figure><p>项目初始化完成后，可在命令行窗口输入hexo server或hexo s启动项目。</p></li><li><p>创建部署页面要用的GitHub/Gitee仓库<br>也就是创建一个GitHub Pages，仓库的名称为<code>用户名.github.io.git</code>，另外分支名改为main。</p></li><li><p>建立hexo与git仓库的联系<br>1.首先安装hexo-deployer-git</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>2.修改博客配置文件_config.yml</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>3.输入如下命令将代码部署到GitHub</p><pre><code class="language-shell">// 三个命令的作用分别为：删除生成的文件；生成静态文章；部署文章hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  // Git BASH终端hexo clean; hexo generate; hexo deploy  // VSCODE终端</code></pre></li></ol><h2 id="博客美化">博客美化</h2><ol><li>选择喜欢的主题模板</li><li>安装模板并根据对应的文档进行配置<br>主要是对博客配置文件<code>config.yml</code>和主题配置文件<code>_config.主题名.yml</code>进行操作，细则需要参考对应主题的使用文档。</li><li>配置完成后hexo三连，hexo clean &amp;&amp; hexo g &amp;&amp; hexo d，将博客部署到github/gitee上</li></ol><h2 id="优化相关">优化相关</h2><p>Vercel是一个代码托管平台，能够托管html静态页面。</p><ul><li>使用Vercel部署hexo博客，加快博客访问速度<ol><li>登陆并注册vercel</li><li>新建vercel项目，关联github/gitee上的博客仓库</li><li>在项目的控制面板点击deploy进行部署</li><li>在vercel绑定自定义域名并在域名提供网站设置好解析</li></ol></li><li>使用Vercel部署github图床<ol><li>新建github仓库用作图床</li><li>在vercel里关联图床仓库并部署</li><li>绑定自定义域名并在域名提供网站设置好解析</li></ol></li></ul><h2 id="其他配置">其他配置</h2><ul><li>twikoo评论<ol><li>云函数部署</li><li>前端部署</li><li>开启邮箱通知功能</li></ol></li><li>欢迎信息定位<ol><li>在腾讯位置服务获取key</li><li>在对应配置文件填写key</li></ol></li><li>picGo结合markdown<ol><li>获取图床的token</li><li>在picgo中进行配置</li><li>图床配置过程参考：<a href="https://www.fomal.cc/posts/d7fb1ba1.html">https://www.fomal.cc/posts/d7fb1ba1.html</a></li></ol></li></ul><h2 id="关键词">关键词</h2><ul><li>hexo</li><li>vercel</li><li>twikoo</li><li>域名购买、绑定与解析</li><li>定位功能</li><li>picGo</li></ul><h2 id="主要折腾点">主要折腾点</h2><ol><li>博客的美化：需要参照对应文档实现自己的想法，文档没写/没找到的只能自己调试</li><li>vercel部署与域名绑定</li><li>欢迎信息定位</li><li>picGo与图床关联</li></ol><h2 id="参考文献">参考文献</h2><p><a href="https://www.fomal.cc/posts/e593433d.html">https://www.fomal.cc/posts/e593433d.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>md常用语法</title>
      <link href="/posts/58d3bb7c.html"/>
      <url>/posts/58d3bb7c.html</url>
      
        <content type="html"><![CDATA[<h2 id="一-标题">一. 标题</h2><p>使用#号可以表示1-6级的标题。<br>格式：#（几个符号就是几级）+ 空格 + 内容。</p><h2 id="二-段落">二. 段落</h2><p>在段内强制换行使用<strong>两个以上的空格</strong>加回车。</p><h2 id="三-区块引用">三.区块引用</h2><p>在段落前使用符号&gt;，可以嵌套使用。</p><blockquote><p>区块引用</p><blockquote><p>嵌套引用</p></blockquote></blockquote><h2 id="四-代码区块">四.代码区块</h2><p>```语言类型 <code>代码</code> ```</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;你好&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-强调">五.强调</h2><p>一个星号是斜体，两个星号是粗体，如：</p><blockquote><p>*斜体*</p><p>**粗体**</p></blockquote><h2 id="六-列表">六.列表</h2><h3 id="1-无序表">1.无序表</h3><p>使用 <code>-</code> 、<code>+</code> 、 <code>*</code> 标记无序列表</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><h3 id="2-有序表">2.有序表</h3><p>讲上述符号换成数字并辅以.</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h2 id="七-分割线">七.分割线</h2><p>三个星，也可以用减或者下划线<br>这是一行</p><hr><p>这是二行</p><h2 id="八-链接">八.链接</h2><p>行内式或者参考式</p><h3 id="行内式">行内式</h3><blockquote><p>方括号内容 圆括号链接<br>[这是百度](<a href="https://www.baidu.com">https://www.baidu.com</a>)<br><a href="https://www.baidu.com">这是百度</a></p></blockquote><h3 id="参考式">参考式</h3><p>两个方括号，第二个方括号要说明，并且说明不能出现在区块中。<br>[百度][1]<br>[1]:<a href="https://www.baidu.com">https://www.baidu.com</a></p><blockquote><p><a href="https://www.baidu.com">百度</a></p></blockquote><h2 id="九-图片">九.图片</h2><p>使用方式与链接的写法相同，但是最前面要加一个!号，并且方括号的内容是图片不显示时的替代文本<br>![加载失败](<a href="https://picbed.otakuru.top/tmp.jpg">https://picbed.otakuru.top/tmp.jpg</a>)<br><img src="https://picbed.otakuru.top/tmp.jpg" alt="加载失败"></p><h2 id="十-反斜杠">十.反斜杠</h2><p>反转义，使符号变为普通符号</p><h2 id="十一-符号">十一.符号``</h2><p>起到标记作用，如：<br>`ctrl + a`<br><code>ctrl + a</code></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
